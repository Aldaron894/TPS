theory ENSEMBLES
  imports Main
begin

(*Exercice 1:*)

fun isSet:: "'a list \<Rightarrow> bool"
  where
  "isSet [] =  True " |
  "isSet (x#xs) = (~(List.member xs x) \<and> (isSet xs))"

value "isSet[(1::nat), 2, 3] "
value "isSet[1::nat, 2, 3, 1]"

(* Exercice 2:*)

fun clean:: " 'a list \<Rightarrow> 'a list"
  where
"clean [] = []" |
"clean(x#xs) = (if (List.member xs x) then clean xs else x#(clean xs))"

value "clean[1::nat, 2, 3, 4, 3, 2, 1]"


(*Exercice 3:*)

lemma memberclean:"
(List.member (clean xs) y ) \<longleftrightarrow> (List.member xs y)
"
  apply (induct xs)
   apply simp
  by (metis clean.simps(2) member_rec(1))




 

(*Exercice 4:*)

lemma issetclean:"
(isSet L) \<longrightarrow> ((clean L) = L)
"

  apply (induct L)
  using clean.simps(1) apply blast
  by simp


lemma issetcleanbis:"
isSet(clean L)
"

  apply (induct L)
  apply simp
  by (simp add: memberclean)

(*Exercice 5:*)

fun delete::" 'a  \<Rightarrow> 'a list \<Rightarrow> 'a list"
  where
"delete x []  = []" |
"delete x (y#ys)  = (if x=y then delete x ys else y#delete x ys)"

value " delete 1 [1::nat, 2, 3, 1, 5]"

(*Exercice 6:*)

lemma memberdelete: "
\<not>(List.member (delete x L)  x )
"
  apply (induct L)
  apply (simp add: member_rec(2))
  by (metis delete.simps(2) member_rec(1))
   

  

(*Exercice 7:*)

fun intersection:: "'a list \<Rightarrow> 'a list \<Rightarrow> 'a list"
  where
"intersection xs [] = []" |
"intersection [] xs = []" |
"intersection (x#xs) ys = (if List.member ys x then (x#intersection xs ys) else intersection xs ys)"

(*Exercice 8:*)

lemma memberintersect: "
List.member (intersection L K) x =( (List.member L x) \<and> (List.member K x) )
"
  apply (induct L)
  apply (smt (verit, ccfv_SIG) intersection.elims member_rec(2) neq_Nil_conv)
  by (smt (verit) intersection.elims list.discI list.sel(3) member_rec(1))
 
(*Exercice 9:*)


lemma setintersect: "
isSet(L) \<and> isSet(K) \<longrightarrow> isSet(intersection L K)
"
  apply (induct L )
  apply (metis intersection.simps(1) intersection.simps(2) isSet.elims(2))
  by (smt (verit) intersection.elims isSet.simps(2) list.sel(3) memberintersect)

  
  

(*Exercice 10:*)

fun union :: "'a list  \<Rightarrow> 'a list \<Rightarrow> 'a list"
  where 
"union [] L =  L"|
"union L [] = L"|
"union (x#xs) L = (if (List.member L x) then (union xs L) else x#(union xs L))"

value " union [1::nat, 2, 3] [2::nat, 5, 4]"



(*Exercice 11:*)

lemma memberunion1:"

((List.member L x) \<or> (List.member K x)) \<longrightarrow> (List.member (union L K) x)
"
  apply (induct L)
  apply simp
  apply (simp add: member_rec(2))
  by (smt (verit) intersection.simps(2) list.sel(3) member_rec(1) memberintersect union.elims)

  

 
  



lemma memberunion2:"
(List.member (union L K) x) \<longrightarrow> ((List.member L x) \<or> (List.member K x))
"
  apply (induct L)
  apply (induct K)
  apply simp
  apply simp
  by (smt (verit, ccfv_SIG) list.sel(3) member_rec(1) union.elims)

lemma memberunion:"
(List.member (union L K) x) =  ((List.member L x) \<or> (List.member K x))
"
  apply auto
  using memberunion2 apply fastforce
  apply (simp add: memberunion1)
  by (simp add: memberunion1)
 

  


(*Exercice 12:*)

lemma unionset "
 (isSet l1) \<longrightarrow> (isSet l2) \<longrightarrow> (isSet (union l1 l2)) 
"
  apply (induct l1)
     apply (induct l2)
  apply auto
  sorry

(*Exercice 13:*)

fun includee:: " 'a list \<Rightarrow> 'a list \<Rightarrow> bool"
  where
"includee []  xs = True"|
"includee (x#xs) [] = False"|
"includee (x#xs) ys = ((List.member ys x) \<and> (includee xs ys)) "


fun equal:: "'a list \<Rightarrow> 'a list \<Rightarrow> bool"
  where
  "equal xs ys = ((includee xs ys) \<and> (includee ys xs))"
  

value "equal [1::nat, 2 , 3] [2::nat, 1, 3, 4] "

(*Exercice 14:*)

lemma includeeMember: "

 ((includee ys xs) \<longrightarrow> (\<forall>x. (List.member ys x) \<longrightarrow> (List.member xs x)))
"
  apply (induct ys)
  apply (simp add: member_rec(2))
  by (metis (mono_tags, lifting) includee.elims(2) includee.simps(3) list.simps(3) member_rec(1))

lemma MemberIncludee :"

(\<forall>x. (List.member L x)\<longrightarrow>(List.member K x)) \<longrightarrow> (includee L K)
"
  apply auto
  apply (induct L)
  using includee.simps(1) apply blast
  by (smt (verit, ccfv_threshold) includee.elims(3) includee.simps(3) member_rec(1) member_rec(2))


lemma MemberEqual: "

(\<forall>x.  (List.member ys x) \<longleftrightarrow> (List.member xs x) ) \<longrightarrow> (equal xs ys)
"
  apply (induct ys)
  apply (simp add: MemberIncludee)
  by (simp add: MemberIncludee)
 




lemma equalmember: "
 ( equal xs ys) \<longleftrightarrow> (\<forall>x. (List.member ys x) \<longleftrightarrow> (List.member xs x))
"
  apply auto
  using includeeMember apply blast
  using includeeMember apply blast
  apply (simp add: MemberIncludee)
  by (simp add: MemberIncludee)
 
(*Delete list for tp 5 *)

fun deleteList::"'a list \<Rightarrow> 'a list \<Rightarrow> 'a list"
  where
"deleteList [] L =L"|
"deleteList (x#xs) ys = (delete x (deleteList xs ys) )"

end

