---
title: TP3
author: Nicolas Mendel-Boucharin
format: html
---

```{python}
import numpy as np
import scipy.stats as stats
import scipy.linalg as linalg
import matplotlib.pyplot as plt
import matplotlib
import random
import math
```

## Exercice 1:

### 1.

```{python}

import  csv
with open('/home/aldaron/Documents/Cours/probastat/TP/donnees5.csv' , newline = '') as f:
        lignes = [ligne for ligne in csv.reader(f)]


lignes = list(map(float, lignes[0][:]))

estimemp=2*np.mean(lignes)

print("l'estimateur empirique est : ", estimemp)
maxivrai=np.max(lignes)
print("l'estimateur du maximum de vraisemblance est : ", maxivrai)


```

### 2.

```{python}
y=np.cumsum(lignes)
x=np.arange(1, 1001, 1)
z=[]
zz=[]
for i in x:
    z.append(2*y[i-1]/i)
    zz.append(np.max(lignes[0:i]))

plt.plot(x, z, color = 'blue', label = 'estimateur empirique')
plt.plot(x, zz, color = 'red', label = 'estimateur du max de vraisemblance')
plt.legend()
plt.show()


teta=13
M=stats.uniform.rvs(scale = teta, size=(1000,1000))
espteta=teta/2
varteta=(teta**2)/12

MM=[np.sqrt(1000)*(2*np.mean(M[i, :])- teta)/(2*np.sqrt(varteta)) for i in range(1000)]

MMM=[-1000*(np.max(M[i, :])-teta) for i in range(1000)]

plt.hist(MM, bins=20, density=True, label ="histogramme pour l'estimateur empirique")

X=np.linspace(-4, 4, 10000)
plt.plot(X, stats.norm.pdf(X, loc = 0, scale = 1), label ="loi normale 0 1")
plt.legend()
plt.show()
plt.clf()

plt.hist(MMM, bins=20, density=True, label ="histogramme pour l'estimateur du maximum de vraissemblance")
plt.plot(X, stats.expon.pdf(X, scale = teta), label ="loi expo de paramètre 1/teta")
plt.legend()
plt.show()

```

### 3.

Non (vitesse de n et ça ressemble à une loi exponentielle)

#### 4.

```{python}
alpha=0.05
zinf=[z[i] - (1.96/np.sqrt(i+1))*(z[i]/np.sqrt(12)) for i in range(1000)]
zsup=[z[i] + (1.96/np.sqrt(i+1))*(z[i]/np.sqrt(12)) for i in range(1000)]

plt.plot(x, z, color = 'blue', label = 'estimateur empirique')

plt.plot(x, zinf, color = 'purple', label ='intervalle de confiance')
plt.plot(x, zsup, color = 'purple')
plt.legend()
plt.show()
```

## Exercice 2:

### 1.


```{python}
N=10000
X=stats.norm.rvs(loc =0, scale = 1, size=N)


def kemp(n,p):
    X1=np.sort(X[0:n+1])
    return X1[math.floor(n*p)+1]


x=np.linspace(0.2, 0.5, 1000)
valeurn=[1000*(i+1) for i in range(9)]
for i in valeurn:
    plt.plot(x , [kemp(i, p) for p in x])

plt.plot(x, stats.norm.ppf(x))

```

### 2.

(Je passe)


## Exercice 3 :



```{python}
import  csv
with open('/home/aldaron/Documents/Cours/probastat/TP/donnees5.csv' , newline = '') as f:
        lignes = [ligne for ligne in csv.reader(f)]
lignes1 = list(map(float, lignes[0][:]))

```

### 1.

Ce truc tends vers une loi du $\chi_2$ à n degrés de liberté et par le cours :  

$IC_{1-\alpha}(\sigma^2)=[-\frac{\sum_1^n(X_i-\bar{X}_n)^2}{z_{n-1}(\frac{1-\alpha}{2})} ; \frac{\sum_1^n(X_i-\bar{X}_n)^2}{z_{n-1}(\frac{\alpha}{2})}]$

```{python}
y=[]

for i in range (1000):


plt.legend()
plt.show()

```


### 2.

à finir avec exo 4 et 6 également avant le cc