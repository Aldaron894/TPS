---
title: TP2
author: Nicolas Mendel-Boucharin
format: html
---

```{python}
import numpy as np
import scipy.stats as stats
import scipy.linalg as linalg
import matplotlib.pyplot as plt
import matplotlib
import random
import math
```

## Exercice 1:

```{python}
import  csv
with open('/home/aldaron/Documents/Cours/probastat/TP/donnees2.csv' , newline = '') as f:
        lignes = [ligne for ligne in csv.reader(f)]


print(lignes)
colonne1 = [eval(lignes[i][0]) for i in range(len(lignes))]

colonne2 = [eval(lignes[i][1]) for i in range(len(lignes))]
print(colonne1)
print(colonne2)

plt.plot(colonne2, colonne1)
plt.show()


```

## Exercice 2:

```{python}
import  csv
with open('/home/aldaron/Documents/Cours/probastat/TP/donnees3.csv' , newline = '') as f:
        lignes = [ligne for ligne in csv.reader(f)]
colonne1 = [eval(lignes[i][0]) for i in range(len(lignes))]
colonne2 = [eval(lignes[i][1]) for i in range(len(lignes))]

plt.plot(colonne1, colonne2, '^')

```

## Exercice 3:

```{python}
fig, axs=plt.subplots(3,2)
X=np.linspace(-np.pi, np.pi, 1000)
Z=[-(np.pi)/2, (np.pi)/2]
axs[0][0].plot(X, np.cos(X), 'b')
axs[1][0].plot(X, np.sin(X), 'g')
axs[2][0].plot(Z, np.tan(Z), 'r')
Y=np.linspace(-1, 1, 1000)
axs[0][1].plot(Y, np.arccos(Y), 'b')
axs[1][1].plot(Y, np.arcsin(Y), 'g')
axs[2][1].plot(Y, np.arctan(Y), 'r')
plt.show()
```

## Exercice 4: 

```{python}
def binom(n):
    C=[]
    for k in range(n):
        C.append(math.factorial(n)/(math.factorial(k)*math.factorial(n-k)))
    X = np.linspace(0, n, 100*n)
    Y = []
    for i in range(n):
        for j in range(100):
            Y.append(C[i])
    
    plt.plot(X,Y)
    plt.show

binom(10)

```


### Exercice 5:

```{python}
from mpl_toolkits.mplot3d import Axes3D
import  csv
with open('/home/aldaron/Documents/Cours/probastat/TP/donnees4.csv' , newline = '') as f:
        lignes = np.array([np.array(ligne) for ligne in csv.reader(f)])
X = lignes[0, 1:].astype(float)
Y = lignes[1:, 0].astype(float)
Z = lignes[1:, 1:].astype(float)

fig = plt.figure()
ax = fig.add_subplot(1,1,1, projection='3d')
X, Y = np.meshgrid(X,Y)
surf= ax.plot_surface(X, Y, Z, antialiased=False)
plt.show()
```

### Exercice 6:

```{python}
M=stats.expon.rvs(scale = 1, size=(100,200))

Z=[((np.sum(M[i,:])/200)-1)/(1/np.sqrt(200)) for i in range(100)]

plt.hist(Z, bins=10, density=True, label ="histogramme")
X=np.linspace(-4, 4, 10000)
plt.plot(X, stats.norm.pdf(X, loc = 0, scale = 1))
```

### Exercice 7:

```{python}

def va():
        x=stats.uniform.rvs(loc=0, scale =1)
        print(x)
        if x<=0.1:
                return(0)
        elif x>0.1 and x<=0.4:
                return(1)
        elif x>0.4 and x<=0.6:
                return(2)
        else:
                return(3)

va()
        

```


### Exercice 8:

#### 1.

```{python}
def bernou(n):
        x=stats.uniform.rvs(loc=0, scale =1, size=n)
        y=[]
        for i in range(n):
                if x[i]<=0.5:
                        y.append(0)
                else:
                        y.append(1)
        return y

print(bernou(10))

def bernou1(n):
        x=stats.uniform.rvs(loc=0, scale =1, size=n)
        y=[]
        for i in range(n):
                if x[i]<=0.5:
                        y.append(-1)
                else:
                        y.append(1)
        return y

print(bernou1(11))

```

#### 2.

```{python}
def uniform4(n):
        x=stats.uniform.rvs(loc=0, scale =1, size=n)
        y=[]
        for i in range(n):

                if x[i]<=0.25:
                        y.append(0)
                elif x[i]>0.25 and x[i]<=0.5:
                        y.append(1)
                elif x[i]>0.5 and x[i]<=0.75:
                        y.append(2)
                else:
                        y.append(3)    
        return y
print(uniform4(10))
```

#### 3.

```{python}
def expo(n, lam):
        y=[]
        z=[]
        u=stats.uniform.rvs(loc=0, scale=1, size=n)
        for i in range(n):
                y.append(-np.log(1-u[i])/lam)
        z=np.cumsum(y)/np.arange(1, n+1, 1)
        plt.plot(np.arange(1, n+1, 1), z)
print(expo(500, 1))

```